==697== Memcheck, a memory error detector
==697== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==697== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==697== Command: ./TestCollatz
==697== 
Running main() from gtest_main.cc
[==========] Running 19 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 19 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_1
[       OK ] CollatzFixture.read_1 (15 ms)
[ RUN      ] CollatzFixture.read_2
[       OK ] CollatzFixture.read_2 (3 ms)
[ RUN      ] CollatzFixture.read_3
[       OK ] CollatzFixture.read_3 (3 ms)
[ RUN      ] CollatzFixture.compute_algo_1
[       OK ] CollatzFixture.compute_algo_1 (11 ms)
[ RUN      ] CollatzFixture.compute_algo_2
[       OK ] CollatzFixture.compute_algo_2 (8 ms)
[ RUN      ] CollatzFixture.compute_algo_3
[       OK ] CollatzFixture.compute_algo_3 (6 ms)
[ RUN      ] CollatzFixture.compute_algo_4
[       OK ] CollatzFixture.compute_algo_4 (2 ms)
[ RUN      ] CollatzFixture.compute_algo_5
[       OK ] CollatzFixture.compute_algo_5 (2 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (3 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (10 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (2 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (27 ms)
[ RUN      ] CollatzFixture.print_1
[       OK ] CollatzFixture.print_1 (5 ms)
[ RUN      ] CollatzFixture.print_2
[       OK ] CollatzFixture.print_2 (2 ms)
[ RUN      ] CollatzFixture.print_3
[       OK ] CollatzFixture.print_3 (3 ms)
[ RUN      ] CollatzFixture.print_4
[       OK ] CollatzFixture.print_4 (1 ms)
[ RUN      ] CollatzFixture.solve_1
[       OK ] CollatzFixture.solve_1 (7 ms)
[ RUN      ] CollatzFixture.solve_2
[       OK ] CollatzFixture.solve_2 (44 ms)
[ RUN      ] CollatzFixture.solve_3
[       OK ] CollatzFixture.solve_3 (17 ms)
[----------] 19 tests from CollatzFixture (185 ms total)

[----------] Global test environment tear-down
[==========] 19 tests from 1 test case ran. (223 ms total)
[  PASSED  ] 19 tests.
==697== 
==697== HEAP SUMMARY:
==697==     in use at exit: 72,704 bytes in 1 blocks
==697==   total heap usage: 2,538 allocs, 2,537 frees, 234,672 bytes allocated
==697== 
==697== LEAK SUMMARY:
==697==    definitely lost: 0 bytes in 0 blocks
==697==    indirectly lost: 0 bytes in 0 blocks
==697==      possibly lost: 0 bytes in 0 blocks
==697==    still reachable: 72,704 bytes in 1 blocks
==697==         suppressed: 0 bytes in 0 blocks
==697== Rerun with --leak-check=full to see details of leaked memory
==697== 
==697== For counts of detected and suppressed errors, rerun with: -v
==697== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:100.00% of 35
Branches executed:100.00% of 36
Taken at least once:69.44% of 36
Calls executed:100.00% of 27
Creating 'Collatz.c++.gcov'
