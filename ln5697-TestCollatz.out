==565== Memcheck, a memory error detector
==565== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==565== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==565== Command: ./TestCollatz
==565==
Running main() from gtest_main.cc
[==========] Running 16 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 16 tests from CollatzFixture
[ RUN      ] CollatzFixture.read_1
[       OK ] CollatzFixture.read_1 (24 ms)
[ RUN      ] CollatzFixture.read_2
[       OK ] CollatzFixture.read_2 (4 ms)
[ RUN      ] CollatzFixture.read_3
[       OK ] CollatzFixture.read_3 (6 ms)
[ RUN      ] CollatzFixture.eval_1
[       OK ] CollatzFixture.eval_1 (46 ms)
[ RUN      ] CollatzFixture.eval_2
[       OK ] CollatzFixture.eval_2 (28 ms)
[ RUN      ] CollatzFixture.eval_3
[       OK ] CollatzFixture.eval_3 (5 ms)
[ RUN      ] CollatzFixture.eval_4
[       OK ] CollatzFixture.eval_4 (40 ms)
[ RUN      ] CollatzFixture.cycle_1
[       OK ] CollatzFixture.cycle_1 (3 ms)
[ RUN      ] CollatzFixture.cycle_2
[       OK ] CollatzFixture.cycle_2 (2 ms)
[ RUN      ] CollatzFixture.cycle_3
[       OK ] CollatzFixture.cycle_3 (2 ms)
[ RUN      ] CollatzFixture.print_1
[       OK ] CollatzFixture.print_1 (8 ms)
[ RUN      ] CollatzFixture.print_2
[       OK ] CollatzFixture.print_2 (5 ms)
[ RUN      ] CollatzFixture.print_3
[       OK ] CollatzFixture.print_3 (3 ms)
[ RUN      ] CollatzFixture.solve_1
[       OK ] CollatzFixture.solve_1 (16 ms)
[ RUN      ] CollatzFixture.solve_2
[       OK ] CollatzFixture.solve_2 (11 ms)
[ RUN      ] CollatzFixture.solve_3
[       OK ] CollatzFixture.solve_3 (806 ms)
[----------] 16 tests from CollatzFixture (1047 ms total)

[----------] Global test environment tear-down
[==========] 16 tests from 1 test case ran. (1110 ms total)
[  PASSED  ] 16 tests.
==565==
==565== HEAP SUMMARY:
==565==     in use at exit: 72,704 bytes in 1 blocks
==565==   total heap usage: 927 allocs, 926 frees, 165,964 bytes allocated
==565==
==565== LEAK SUMMARY:
==565==    definitely lost: 0 bytes in 0 blocks
==565==    indirectly lost: 0 bytes in 0 blocks
==565==      possibly lost: 0 bytes in 0 blocks
==565==    still reachable: 72,704 bytes in 1 blocks
==565==         suppressed: 0 bytes in 0 blocks
==565== Rerun with --leak-check=full to see details of leaked memory
==565==
==565== For counts of detected and suppressed errors, rerun with: -v
==565== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Collatz.c++'
Lines executed:100.00% of 39
Branches executed:100.00% of 42
Taken at least once:71.43% of 42
Calls executed:96.00% of 25
Creating 'Collatz.c++.gcov'
